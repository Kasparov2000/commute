generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
  DRIVER
}

enum UserOrigin {
  THIRD_PARTY
  INDIGENOUS
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  username       String?
  firstName      String?
  lastName       String?
  email          String?        @unique
  phoneNumber    String?        @unique
  password       String?
  balance        Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  journey        Journey[]
  userOrigin     UserOrigin     @default(INDIGENOUS)
  role           ROLE           @default(USER)
  profilePic     Bytes[]
  passengerLogs  PassengerLog[]
  Driver         Driver?
  BusToDriver    BusToDriver[]
  RouteToBus     RouteToBus[]
  BusInTransit   BusInTransit?  @relation(fields: [busInTransitId], references: [id])
  busInTransitId String?        @db.ObjectId
}

model Driver {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @unique @db.ObjectId
  experience  Int           @default(0)
  busToDriver BusToDriver[]
}

model BusToDriver {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  bus      User    @relation(fields: [busId], references: [id])
  busId    String  @db.ObjectId
  driver   Driver  @relation(fields: [driverId], references: [id])
  driverId String  @db.ObjectId
  active   Boolean
}

model Bus {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  manufacturer   String
  model          String
  year           Int
  picture        Bytes[]
  licenseNumber  String         @unique
  capacity       Int            @default(0)
  passengerState PassengerState @default(STALE)
  motionState    MotionState    @default(PARKING)
  operationState OperationState @default(IN_SERVICE)
  journeys       Journey[]
  schedules      Schedule[]
  inTransit      BusInTransit?  @relation(fields: [inTransitId], references: [id])
  inTransitId    String?        @db.ObjectId
}

model BusInTransit {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  currentLocation    String         @default("")
  passengerState     PassengerState @default(STALE)
  motionState        MotionState    @default(PARKING)
  numberOfPassengers Int            @default(1)
  buses              Bus[]
  passengers         User[]
}

model PassengerLog {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  journey     Journey @relation(fields: [journeyId], references: [id])
  journeyId   String  @db.ObjectId
  location    String
  boardedIn   Boolean
  passenger   User    @relation(fields: [passengerId], references: [id])
  passengerId String  @db.ObjectId
}

enum MotionState {
  INTRANSIT
  PARKING
}

enum PassengerState {
  STALE
  TRANSITION
}

enum OperationState {
  IN_SERVICE
  OUT_OF_SERVICE
}

model RouteToBus {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  bus     User    @relation(fields: [busId], references: [id])
  busId   String  @db.ObjectId
  route   Route   @relation(fields: [routeId], references: [id])
  routeId String  @db.ObjectId
  active  Boolean
}

model Route {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  from       String
  to         String
  price      JourneyPrice @relation(fields: [priceId], references: [id])
  priceId    String       @db.ObjectId
  journeys   Journey[]
  schedules  Schedule[]
  RouteToBus RouteToBus[]
}

model Journey {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bus           Bus            @relation(fields: [busId], references: [id])
  busId         String         @db.ObjectId
  route         Route          @relation(fields: [routeId], references: [id])
  routeId       String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.ObjectId
  passengerLogs PassengerLog[]
}

model Schedule {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  route         Route    @relation(fields: [routeId], references: [id])
  routeId       String   @db.ObjectId
  bus           Bus      @relation(fields: [busId], references: [id])
  busId         String   @db.ObjectId
  departureTime DateTime
  arrivalTime   DateTime
}

model JourneyPrice {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @updatedAt
  updatedAt DateTime @updatedAt
  price     Float    @default(0)
  Route     Route[]
}
